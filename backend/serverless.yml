# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: missme # NOTE: update this with your service name

plugins:
  - aws-amplify-serverless-plugin
  - serverless-pseudo-parameters
  - serverless-plugin-optimize

custom:
  services_table: ${ssm:/${self:service.name}/${self:provider.stage}/service_table_name}
  amplify:
    - filename: ../frontend/src/aws-exports.js
      type: javascript
      appClient: WebUserPoolClient
      s3bucket: disabled


package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.services_table}"


functions:
  create-service:
    handler: services/create.handler
    environment:
      SERVICES_TABLE: ${self:custom.services_table}
    events:
     - http:
        path: /services
        method: post
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  update-service:
    handler: services/update.handler
    environment:
      SERVICES_TABLE: ${self:custom.services_table}
    events:
     - http:
        path: /services/{serviceId}
        method: put
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true
     - http:
        path: /services/{serviceId}
        method: patch
        cors: true

        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true

  delete-service:
    handler: services/delete.handler
    environment:
      SERVICES_TABLE: ${self:custom.services_table}
    events:
     - http:
        path: /services/{serviceId}
        method: delete
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true

  get-service:
    handler: services/list.handler
    environment:
      SERVICES_TABLE: ${self:custom.services_table}
    events:
     - http:
        path: /services/{serviceId}
        method: get
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true
     - http:
        path: /services
        method: get
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  get-notify:
    handler: notify/get.handler
    environment:
      SERVICES_TABLE: ${self:custom.services_table}
    events:
     - http:
        path: /notify/{serviceId}
        method: get
        cors: true
        request:
          parameters:
            paths:
              serviceId: true


resources:
  Resources:
    # ---
    # User management
    # ---
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Description: "An Amazon Cognito user pool for authenticating users"
      Properties:
        UserPoolName: missme-${self:provider.stage}-user-pool

    # Create a client that is allowed to use the userpool
    WebUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Description: "App Client for Web Usage"
      Properties:
        ClientName: missme-${self:provider.stage}-web-cognitoclient
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }

    # ---
    # Authorizers
    # ---
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [UserPool, Arn]

